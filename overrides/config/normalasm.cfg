# Configuration file

bakedquad {
    # If disabled, will stop classesThatCallBakedQuadCtor from being automatically populated, for compatibility purposes - <default: true>
    B:autoPopulateCallBakedQuadCtor=true

    # If disabled, will stop classesThatExtendBakedQuad from being automatically populated, for compatibility purposes - <default: true>
    B:autoPopulateExtendBakedQuad=true

    # Provide compatibility with Dynamic Trees by automatically adding QuadManipulator to classesThatCallBakedQuadCtor when BakedModelBlockBranchCactus is added (Requires autoPopulateCallBakedQuadCtor to be true) - <default: true>
    B:bakedQuadDynaTreeCompat=true

    # Classes where BakedQuad::new calls need to be redirected. As of 3.2, this should be done automatically, while the changes will show in the next launch - <default: [net.minecraft.client.renderer.block.model.FaceBakery]>
    S:classesThatCallBakedQuadCtor <
        com.rwtema.extrautils2.items.ItemSnowglobe
        openblocks.client.renderer.block.canvas.StencilModelTransformer
        appeng.client.render.cablebus.QuadRotator
        org.cyclops.integrateddynamics.client.model.CableModelBase
        appeng.thirdparty.codechicken.lib.model.Quad
        thecodex6824.thaumicaugmentation.client.model.CustomCasterAugmentModel$BakedModel
        codechicken.lib.util.VertexDataUtils
        net.minecraft.client.renderer.block.model.FaceBakery
        thaumcraft.client.lib.obj.MeshModel
        org.cyclops.evilcraft.core.client.model.BroomModelBaked
        appeng.client.render.model.AutoRotatingModel
        com.rwtema.extrautils2.backend.model.Box
        appeng.client.render.model.ColorApplicatorBakedModel
        org.cyclops.evilcraft.client.render.model.ModelEntangledChaliceBaked
        com.rwtema.extrautils2.utils.helpers.QuadHelper
        codechicken.lib.render.buffer.BakingVertexBuffer
        org.cyclops.cyclopscore.client.model.DynamicBaseModel
        com.rwtema.extrautils2.backend.model.PassthruModelItem$4$1
        openblocks.client.renderer.item.devnull.DevNullItemOverride
        com.jaquadro.minecraft.chameleon.render.ChamRenderLL
        org.cyclops.evilcraft.core.client.model.BroomPartModelBaked
     >

    # Classes that extend BakedQuad need to be handled separately. This should be done automatically, while the changes will show in the next launch - <default: []>
    S:classesThatExtendBakedQuad <
        
     >

    # Allows bucket models to re-use UnpackedBakedQuads - <default: true>
    B:reuseBucketQuads=true

    # Saves RAM by removing BakedQuad instance variables, redirecting BakedQuad creation to specific BakedQuad child classes. This will be forcefully turned off when Optifine is installed as it is incompatible - <default: true>
    B:squashBakedQuads=true
}


canonicalization {
    # Deduplicate ASMData related Strings - <default: true>
    B:asmDataStringCanonicalization=true

    # Deduplicate Java's FilePermission cache's names within SecureClassLoader - <default: true>
    B:filePermissionsCacheCanonicalization=true

    # Deduplicate LockCode when reading from NBT - <default: true>
    B:lockCodeCanonicalization=true

    # Deduplicate Model Conditions. Enable this if you do not have Foamfix installed - <default: false>
    B:modelConditionCanonicalization=true

    # Deduplicate String keys in NBTTagCompound - <default: true>
    B:nbtBackingMapStringCanonicalization=true

    # Deduplicate Strings in NBTTagString - <default: true>
    B:nbtTagStringBackingStringCanonicalization=true

    # Deduplicate package strings when Forge gathers them when mod candidates are loaded - <default: true>
    B:packageStringCanonicalization=true

    # Deduplicate ResourceLocation and ModelResourceLocation instances - <default: true>
    B:resourceLocationCanonicalization=true

    # Deduplicate TextureAtlasSprite's names - <default: true>
    B:spriteNameCanonicalization=true

    # EXPERIMENTAL: Deduplicate BakedQuad's Vertex Data array. If you see any artifacting in-game, turn this off and report it on github - <default: true>
    B:vertexDataCanonicalization=true
}


capability {
    # Delays ItemStack's capabilities from being initialized until they needed to be - <default: true>
    B:delayItemStackCapabilityInit=true

    # Fixes Astral Sorcery applying AmuletHolderCapability to large amount of ItemStacks when it isn't needed. This option will be ignored when Astral Sorcery isn't installed - <default: true>
    B:fixAmuletHolderCapability=true
}


datastructures {
    # Improve hashing performances of various objects - <default: true>
    B:efficientHashing=true

    # Clears and trims ModelManager data structures after models are loaded and baked - <default: true>
    B:moreModelManagerCleanup=true

    # Optimizing FurnaceRecipes. FastFurnace will see very little benefit when this option is turned on - <default: true>
    B:optimizeFurnaceRecipeStore=true

    # Optimize NBTTagCompound's backing map structure - <default: true>
    B:optimizeNBTTagCompoundBackingMap=true

    # If optimizeNBTTagCompoundBackingMap or nbtBackingMapStringCanonicalization is true, uses an Object2ObjectOpenHashMap instead of an Object2ObjectArrayMap - <default: true>
    B:optimizeNBTTagCompoundBackingMapOpenMap=true

    # Optimizes registries - <default: true>
    B:optimizeRegistries=true

    # If JEI/HEI is installed, replace vanilla search trees with JEI's, decreases memory usage, loading time and adds more features to normal creative menu searching - <default: true>
    B:replaceSearchTreeWithJEISearching=false

    # EXPERIMENTAL: Strips ItemStack of some of its fields as it stores some near-useless references - <default: true>
    B:stripNearUselessItemStackFields=true
}


events {
    # [EXPERIMENTAL]: Stops mass object creation when Forge is firing events, this can decrease Garbage Collection pressure - <default: false>
    B:makeEventsSingletons=false
}


forgefixes {
    # Fixes Forge's EntityEntry calling a slow Constructor::newInstance call every time an entity spawns, it is replaced with a fast Function::get generated from LambdaMetafactory#metafactory - <default: true>
    B:fasterEntitySpawnPreparation=true

    # Works around a crash when too many dimensions are registered, caused by JVM optimization issues. - <default: true>
    B:fixDimensionTypesInliningCrash=true

    # Fixes Forge's mistake of annotating FillBucketEvent#getFilledBucket as @Nonnull when the contract isn't fulfilled nor checked. First discovered here: https://github.com/Divine-Journey-2/main/issues/295 - <default: true>
    B:fixFillBucketEventNullPointerException=true

    # Fixes a vanilla-forge code interaction bug leading to a possible ConcurrentModificationException/StackOverflowError crash. First discovered here: https://github.com/GregTechCE/GregTech/issues/1256 - <default: true>
    B:fixTileEntityOnLoadCME=true

    # EXPERIMENTAL: Forcibly remove Forge's FMLSecurityManager that adds very very slight overheads in calls that requires permission checks - <default: false>
    B:removeForgeSecurityManager=false
}


furnace {
    # When optimizeFurnaceRecipeStore is true, experience is determined by who registers the entry first, this is also the fallback option if all three options aren't true - <default: true>
    B:furnaceExperienceFCFS=true

    # When optimizeFurnaceRecipeStore is true, experience is determined by whichever entry gives the most experience - <default: false>
    B:furnaceExperienceMost=false

    # When optimizeFurnaceRecipeStore is true, experience is determined the vanilla way, this method is the most inefficient and random - <default: false>
    B:furnaceExperienceVanilla=false
}


launchwrapper {
    # Invalidate and clean cache entries when the game finishes loading (onto the main screen). Loading into the first world may take longer. This option wouldn't do anything if 'cleanupLaunchClassLoaderLate' is 'true' - <default: false>
    B:cleanCachesOnGameLoad=false

    # Cleanup some redundant data structures in LaunchClassLoader at the earliest point possible (when NormalASM is loaded). Helpful for those that don't have enough RAM to load into the game. This can induce slowdowns while loading the game in exchange for more available RAM - <default: false>
    B:cleanupLaunchClassLoaderEarly=false

    # Cleanup some redundant data structures in LaunchClassLoader at the latest point possible (when the game reaches the Main Screen). This is for those that have enough RAM to load the game and do not want any slowdowns while loading. Note: if 'cleanupLaunchClassLoaderEarly' is 'true', this option will be ignored - <default: true>
    B:cleanupLaunchClassLoaderLate=true

    # Disable the unusused Package Manifest map. This option coincides with Foamfix's 'removePackageManifestMap' option - <default: true>
    B:disablePackageManifestMap=true

    # Disabling caching of classes. This will induce major slowdowns to game/world loads in exchange for more available RAM - <default: false>
    B:noClassCache=false

    # Disabling caching of resources (Class Bytes). This will induce slowdowns to game/world loads in exchange for more available RAM - <default: false>
    B:noResourceCache=false

    # Weaken the caching of classes. This allows the GC to free up more space when the caches are no longer needed. If 'noClassCache' is 'true', this option will be ignored - <default: true>
    B:weakClassCache=true

    # Weaken the caching of resources (Class Bytes). This allows the GC to free up more space when the caches are no longer needed. If 'noResourceCache' is 'true', this option will be ignored. This option coincides with Foamfix's 'weakenResourceCache' option - <default: true>
    B:weakResourceCache=true
}


logging {
    # Allow the game to keep running after crashes as well as adding more information and deobfuscating the crash reports, inspired by VanillaFix - <default: true>
    B:crashReportImprovements=true

    # Use the new updated crash report screens, disable to return to the legacy screens - <default: true>
    B:crashReportUpdatedScreens=true

    # When crashReportImprovements is true, disallow toasts from popping up and carry on playing while keeping crashes silent - <default: true>
    B:hideToastsAndContinuePlaying=true

    # When crashReportImprovements is true, allow the player to return to the main menu when a crash occurs, inspired by VanillaFix - <default: true>
    B:returnToMainMenuAfterCrash=true

    # Rewrite logging output with deobfuscated names when applicable, inspired by VanillaFix - <default: true>
    B:rewriteLoggingWithDeobfuscatedNames=true

    # When crashReportImprovements is true, allows changing the name of what deobfuscated the stacktrace - <default: FermiumASM>
    S:vanityDeobfuscationName=Crash Report from the modpack Divine Journey 2. FermiumASM
}


mcfixes {
    # Fixes MC-129057: https://bugs.mojang.com/browse/MC-129057 - <default: true>
    B:fixMC129057=true

    # Fixes MC-129556: https://bugs.mojang.com/browse/MC-129556 - <default: true>
    B:fixMC129556=true

    # Fixes MC-186052: https://bugs.mojang.com/browse/MC-186052 - <default: true>
    B:fixMC186052=true

    # Fixes MC-30845: https://bugs.mojang.com/browse/MC-30845 - <default: true>
    B:fixMC30845=false

    # Fixes MC-31681: https://bugs.mojang.com/browse/MC-31681 - <default: true>
    B:fixMC31681=true

    # Fixes MC-88176: https://bugs.mojang.com/browse/MC-88176 - <default: true>
    B:fixMC88176=true

    # Limits skin downloading threads to a maximum of half of available CPU cores - <default: true>
    B:limitSkinDownloadingThreads=true

    # Resolves MC-2071: https://bugs.mojang.com/browse/MC-2071 - <default: true>
    B:resolveMC2071=true

    # Enables multiple bug fixes from VanillaFix, such as fixing a crash on closing a LAN world and players being invulnerable in portals - <default: true>
    B:vfixBugFixes=true
}


misc {
    # Process screenshots and print to chat asynchronously - <default: true>
    B:asyncScreenshot=true

    # Copy image after screenshotting to clipboard - <default: false>
    B:copyScreenshotToClipboard=true

    # Use updated CA Certs that was included in 8u311. This most notably fixes 8u51 certs issues - <default: true>
    B:outdatedCaCertsFix=true

    # Optimizes FluidRegistry::enableUniversalBucket check - <default: true>
    B:quickerEnableUniversalBucketCheck=true

    # For some reason Mojang decided to cache int buffers and arrays after a screenshot is taken, this makes sure they're never cached - <default: true>
    B:releaseScreenshotCache=true

    # Removes forced garbage collection calls, inspired by VanillaFix, can make world loading faster - <default: true>
    B:removeExcessiveGCCalls=true

    # Allows changing of dimensions to be smooth and nearly instantaneous, inspired by VanillaFix - <default: true>
    B:smoothDimensionChange=true

    # Strips the boring instanced Random object from SoundEventAccessors and uses ThreadLocalRandom instead - <default: true>
    B:stripInstancedRandomFromSoundEventAccessor=true

    # Adjust thread priorities to improve performance on systems with few cores - <default: true>
    B:threadPriorityFix=true
}


modfixes {
    # When Better with Mods is installed, optimize Blasting Oil related events. The original implementation harms server performance at any given moment. This option will be ignored when Better with Mods isn't installed - <default: true>
    B:bwmBlastingOilOptimization=true

    # EXPERIMENTAL: When ChickenASM (Library of CodeChickenLib and co.) is installed, ClassHierarchyManager can cache a lot of Strings and seem to be unused in any transformation purposes. This clears ClassHierarchyManager of those redundant strings. This option will be ignored when ChickenASM isn't installed - <default: true>
    B:cleanupChickenASMClassHierarchyManager=true

    # When Extra Utilities 2 is installed, disable the crafter's rendering of the item being crafted, this can reduce lag, ignores fixXU2CrafterCrash config option - <default: false>
    B:disableXU2CrafterRendering=false

    # When Immersive Engineering is installed, sometimes it or it's addons can induce an ArrayIndexOutOfBoundsException in BlockIEBase#getPushReaction. This option will be ignored when IE isn't installed - <default: true>
    B:fixBlockIEBaseArrayIndexOutOfBoundsException=true

    # When TerraFirmaCraft is installed, fix the falling block's false starting position  - <default: true>
    B:fixTFCFallingBlockFalseStartingTEPos=true

    # When Extra Utilities 2 is installed, fix and optimize mechanical crafter's rendering - <default: true>
    B:fixXU2CrafterCrash=true

    # When Just Enough Items is installed, it deduplicates strings in the generated generalized suffix trees' edge labels. This option will be ignored when Just Enough Items isn't installed - <default: true>
    B:labelCanonicalization=true

    # Optimizes Astral Sorcery's Resplendent Prism related functions. This option will be ignored when Astral Sorcery isn't installed - <default: true>
    B:optimizeAmuletRelatedFunctions=true

    # When Electroblob's Wizardry is installed, optimize the search for arcane locked tile entities to render - <default: true>
    B:optimizeArcaneLockRendering=true

    # When QMD is installed, optimize its BeamRenderer. The original implementation harms client performance heavily (takes ~5% of each tick time). This option will be ignored when QMD isn't installed - <default: true>
    B:optimizeQMDBeamRenderer=true

    # When EvilCraft Compat + EnderIO is installed, repair the compatibility module - <default: true>
    B:repairEvilCraftEIOCompat=true

    # When CraftTweaker is installed, large modpacks tend to stall in the last stage of loading, when CraftTweaker inexplicably recalculates search trees. This option will be ignored when CraftTweaker isn't installed - <default: true>
    B:skipCraftTweakerRecalculatingSearchTrees=true
}


remapper {
    # Optimizing Forge's Remapper for not storing redundant entries - <default: true>
    B:optimizeFMLRemapper=true
}


rendering {
    # Optimizes some rendering features, not game-breaking; however, negligible at times - <default: true>
    B:optimizeSomeRendering=true

    # Strip unnecessary locals in RenderHelper::enableStandardItemLighting, no idea why it's there - <default: true>
    B:stripUnnecessaryLocalsInRenderHelper=true
}


textures {
    # Calculate and send animated textures only when needed to the GPU. WARNING: Can break modded animated textures, if you are using Optifine you should use Smart Animations instead - <default: false>
    B:onDemandAnimatedTextures=false

    # Releases TextureAtlasSprite's framesTextureData. Won't touch custom TextureAtlasSprite implementations - <default: true>
    B:releaseSpriteFramesCache=true
}


