# Author: Atricos




#
#
#
#
#
#
#
#
#
# WARNING: SPOILERS AHEAD!!!
#
#
#
#
#
#
#
#
#



















import crafttweaker.item.IItemStack;
print("STARTING ContentTweakerBag.zs");

# Encoded Bag of Truth
val bag_of_truth = <extrautils2:bagofholding>.withTag({display: {Lore: ["§c§lUNLOCKED"], Name: "§d§lBag of Truth"}, Items: {l: [10, 12, 119, 114, 105, 116, 116, 101, 110, 95, 98, 111, 111, 107, 5, 37, 31, -117, 8, 0, 0, 0, 0, 0, 0, 0, 125, 86, 77, -113, 27, 69, 16, 117, 14, -127, -64, 1, 113, 64, 34, -96, 68, -44, 90, 2, 1, 114, 76, 18, 33, 33, 16, -56, 108, 20, -60, 90, 98, -125, 4, -126, 40, -110, 47, -19, -103, 26, 79, -29, -103, 110, -45, -35, -77, -50, -128, 56, 33, 110, 92, -7, 13, 123, -28, -56, 125, 127, 25, -81, 122, -58, 51, -29, -51, -128, -42, 90, -53, -3, 81, 31, -81, 94, -67, -22, 87, 39, -109, 87, 38, 55, 119, 106, -61, -2, -42, 100, 50, 121, 56, -55, 126, -99, 6, 126, 30, -90, -97, 77, -65, -73, 84, -37, 106, 85, -35, -65, -1, -16, 19, -57, 84, 88, -69, -43, 102, 67, -103, 117, 20, 114, -90, -110, -107, -111, -33, 54, -93, 66, 103, 60, -97, -49, 87, 102, 101, -50, -54, -8, -11, 35, -69, -102, -76, 9, -20, -40, 7, 57, -91, 77, -54, -100, -58, 61, -100, -100, -2, 54, -7, -78, -13, -13, 52, 87, -127, 74, -75, 101, 47, -2, 96, 91, -101, -83, 120, -128, -49, -85, 75, -85, -3, -43, -91, 35, 117, 112, -73, -24, 45, 60, 26, 88, -88, 105, 111, -85, 34, -107, 11, -54, -44, 98, 98, 35, -41, 114, 117, -63, 20, 108, -13, 61, 102, -29, -75, -50, 70, -13, -5, -11, -93, -88, 22, 88, -103, 118, 43, -49, 6, 96, 32, -87, -94, 32, -119, 113, 49, 98, -27, -99, -18, -9, 19, 59, 67, 42, 42, 52, 23, 61, -87, -94, 24, 115, -5, -9, -88, 19, -57, 56, 94, 83, 96, -93, 18, 109, 43, 31, -47, -61, 1, 82, -40, 76, 25, -32, -106, -38, 112, 42, 9, 102, -64, -105, -68, 45, 57, -90, 30, 93, 70, 48, -41, 92, 104, 70, -18, -38, -109, -83, 66, -125, -22, -116, -80, 98, 72, 103, -92, 3, 54, 76, -29, 47, 28, -84, -9, 5, -41, 91, -87, 50, -19, 115, -100, 94, -46, 94, -59, -6, -104, -115, 4, -4, -58, 0, 39, 75, -86, -92, -91, -32, -16, 93, -73, -6, -40, -51, -23, 81, -95, 3, 98, -12, -119, -77, -5, 25, -48, 119, 108, -20, 94, -30, -11, -119, 102, 19, -76, 15, 115, 122, 28, 57, 70, -58, 6, 108, 39, 118, 99, -12, 47, -30, 115, 80, -95, 47, 58, -101, 63, -28, -7, -116, 126, -86, 124, -96, -126, -91, -98, 8, 77, 21, -42, -16, -100, -92, -2, 75, -119, 34, 38, -74, -74, -110, -90, 110, 2, -67, 125, 124, 61, 1, 68, 100, -115, -20, 124, -48, -19, 44, -101, -108, 75, 112, -56, 69, -118, 91, -45, 99, 121, -126, -93, -1, -12, 71, 51, -31, -89, 23, 60, -125, -85, 88, -118, 11, -113, 95, 105, -29, 81, -91, 8, -111, -45, -101, 60, -100, 16, -126, -89, -50, -82, 15, -54, -59, 46, 64, -91, 58, 122, -109, 5, 95, 51, 46, 10, -69, 23, 115, -30, -112, -126, -106, 127, 14, -39, 21, -20, -56, 3, 37, -54, -100, 45, -29, -15, -84, 10, -107, -117, 108, 86, 73, 34, -5, 42, -64, 70, -27, 104, -25, -20, 6, 109, 6, 114, -31, 67, 126, -57, -128, -41, 55, -32, -67, -41, 5, -2, 45, -110, -81, 71, 9, 44, -25, -34, 30, -14, 15, -85, -54, -91, -111, 67, 82, -44, 79, -5, 82, 35, -40, 25, -24, 0, -57, 23, -116, 2, 47, 59, 90, -17, -112, -97, 8, 65, 89, -93, -116, 30, -41, -109, 92, -52, -98, 119, 87, 79, 119, 56, -126, 116, -124, -50, -71, 120, -73, -48, 7, -75, 110, 57, 73, -85, -23, 14, -31, 40, -25, -59, 72, 2, -34, 7, 109, -51, 106, 42, -72, 68, 60, -101, 108, 62, 122, -79, 98, -63, -43, 45, -82, -38, 92, -120, -44, 108, 4, 21, 9, 93, 46, -36, 61, -42, 24, 41, -38, -63, -71, 100, -10, 96, -56, 13, 41, -40, -45, 54, -75, 25, 58, -93, -21, 88, 19, 11, 37, 60, -61, -107, -33, -5, 16, -70, 19, 125, -37, 9, 29, 55, -47, 71, -127, -58, -116, -55, 72, 15, -21, 80, 11, 5, 76, 58, -32, 22, -7, 18, -51, 77, 109, -38, -30, 60, -82, 38, -78, 8, 3, 37, 32, -15, 65, 72, -20, 1, 3, 20, -73, 67, 125, 68, 61, -34, 61, 18, 66, 105, -58, 1, 26, 81, 124, 99, 33, -17, -114, -60, -82, 40, -73, -21, 117, 61, 102, -11, -13, -66, -103, -19, -111, 48, -9, 106, 118, 109, 12, -100, 63, -117, -109, 96, 33, 45, -13, 86, 95, -6, -77, -77, -77, -45, -61, -97, 108, -35, -5, 63, 69, -123, -66, 80, -75, 19, -108, 14, 69, -100, 13, -60, 116, -56, -71, 54, -12, -103, -48, 126, 73, 94, -23, 116, 44, -117, -65, -122, -83, 123, -88, 106, 10, 93, -116, -3, -37, -76, -17, 106, 122, 45, 17, -48, 88, 18, 105, 103, -54, -102, 59, -123, 29, -103, 123, 43, 113, 116, 2, -22, -24, 36, -17, 47, 120, 46, -78, 123, -119, 53, -24, -27, 84, 39, 82, -124, 89, -69, -39, -44, -30, 122, -104, 31, 30, 53, 96, -125, 116, -49, -63, -97, 43, 13, 86, 27, -99, -60, 105, 115, 60, 57, 103, 47, -122, 31, 99, 23, -78, -73, 81, -21, -32, 15, -37, -85, -87, 88, 80, -67, 55, 86, 121, -37, 98, -44, -12, 72, 70, -5, 56, 119, 83, 43, 3, -76, -67, -65, 16, -95, -58, -6, -122, 3, -79, 41, -28, 60, -117, -110, -57, 17, -79, -82, -46, 20, -102, 88, 30, -122, -115, 31, 75, -80, -20, -21, 16, 99, 17, 40, -75, 67, 123, -64, 24, 122, 93, -62, -19, -77, -60, -20, -128, 48, 44, -63, 2, -24, -59, 97, -124, 73, 7, 72, -95, -103, 79, -24, -68, 38, -116, 18, 10, 123, 75, 92, 67, -20, -24, -119, 109, 58, -112, 11, -49, -62, -79, 59, 61, -3, -92, 29, -64, -107, 122, 103, 19, 7, 7, 18, -36, -97, -61, -122, 89, -48, 35, 78, 84, -27, 121, -96, -41, 81, -63, -6, -57, 14, -126, -5, 47, -123, 106, 27, -65, -93, 35, -62, -44, 5, -57, -127, 6, -126, 117, -31, 55, 79, 32, 65, 50, 78, 89, 65, -67, 84, -11, -102, -57, 40, -5, -2, -15, -56, -118, -18, 119, 74, 71, -116, -74, 8, 66, 108, -107, 49, -53, 63, 6, -96, -82, 89, -122, 109, -84, 80, 84, 18, -101, 53, -81, -128, -110, 65, 64, -88, 81, -28, 110, 106, 19, -120, 31, 38, 6, 99, 42, -21, 53, 42, 40, 9, -62, -104, 68, -75, 50, -111, 1, 50, -60, -16, 48, 80, 27, -72, 68, 64, -117, 102, -21, -100, -125, -38, -27, -10, 121, 45, 67, -57, -11, -102, 55, 86, 107, 26, 116, -20, 94, -98, 15, 46, -46, 81, 71, -83, -113, -77, 119, -34, -99, 16, -69, -94, 126, -99, -3, -30, -8, -63, -92, -61, -75, 46, 30, -12, -65, -128, 34, -128, -56, 44, 18, -62, -88, -62, 91, -38, 26, -101, 108, -123, -17, -15, -63, 35, -23, -87, -90, 38, -15, 125, -77, -124, -62, 30, 30, 60, 109, -101, 65, 102, -107, 16, 26, 74, -97, -46, -47, 126, 106, -121, 3, 13, 108, 76, -64, 17, 10, 120, -87, -74, 97, -35, 30, 38, 46, -26, -65, 46, 42, -73, 67, 101, 110, 77, 94, 82, 85, -56, -83, -101, -68, 124, 10, 21, 79, 44, 30, -41, 55, -125, 14, 5, 79, -34, -68, -70, -4, -8, -22, -78, 56, -17, -37, -11, 27, 105, -41, 7, 55, 38, -73, -32, -55, 22, 23, -100, -34, -104, -4, 11, 101, -65, 97, -125, -106, 11, 0, 0] as byte[] as byte[], n: [10, 12, 119, 114, 105, 116, 116, 101, 110, 95, 98, 111, 111, 107, 5, 2, 31, -117, 8, 0, 0, 0, 0, 0, 0, 0, 117, 86, 93, -113, 27, 53, 20, -99, 62, 20, 10, 15, -68, 32, -63, 11, 72, 55, 65, 32, -112, -78, 81, 85, 33, -96, 125, 65, -69, 42, 21, -117, 40, 5, 105, -85, -126, -120, -124, -100, 25, 103, -58, -115, -57, 14, -2, -56, 48, -83, 120, 2, -15, -58, -17, -40, -33, -63, -2, 50, -50, -75, 39, -109, 97, -73, -20, 74, -101, -51, -40, -66, 31, -25, -98, 115, 60, 111, 22, -59, 27, -59, -19, -99, -88, -91, -65, 83, 20, -59, -68, -8, -31, -27, 60, -56, -33, -62, -4, -63, -4, -44, -71, -70, 89, -48, 57, 9, -19, -92, -88, 122, -38, 72, -87, -87, 82, 47, 94, -12, -53, -27, 114, 101, -8, -9, 89, -45, -109, 112, -110, 122, 27, -55, 7, -91, 53, 105, 107, -73, -54, -84, -30, -35, -69, -9, 62, -57, -74, 47, -25, -65, 23, 63, 30, 67, 54, -44, 75, -127, -96, -40, -97, -73, -32, -20, -12, 92, 77, 27, -21, 40, 52, 34, -48, 106, -34, 74, 97, -8, -111, -35, -112, 86, 27, -71, -102, 99, 1, -33, 83, 106, -124, 70, -28, 15, -114, -111, 61, 10, -11, 66, 85, 99, 105, 105, 15, 111, 122, 127, -36, 116, 30, 114, 82, 79, -79, -63, -49, -11, 24, -49, 56, 109, -91, -86, 20, 9, 125, -43, 66, -103, -95, -123, -73, -58, 77, -7, -48, -33, -29, -9, -97, 38, -99, 104, -75, -107, -44, -10, -76, -117, 59, -91, -121, 66, -66, -106, -44, 9, 79, 123, -23, 122, 10, -46, -120, 82, -39, -24, 41, 88, 59, 35, 44, 53, -94, 34, 65, 94, -75, 74, 11, 71, -75, 21, -121, 99, -8, -56, 48, 52, -109, -13, -23, 79, 37, -125, 116, -83, 50, 18, 39, -41, 54, 6, 46, -57, -115, -27, -92, 116, 38, 96, 49, 88, 90, 71, -91, 43, -118, 59, -92, 104, -112, 85, 114, 80, 99, 23, 36, 12, 73, 19, 20, 42, 94, -51, -41, -62, 3, -39, 5, -25, 73, -16, 13, -55, 51, -126, 79, -37, -106, -49, 116, 92, 8, 87, -95, 66, 70, -123, 33, -7, -27, 127, 114, 34, -114, -44, -101, 19, 31, 55, 27, 85, 42, -28, 25, -93, -99, -59, -44, 14, 16, 30, -8, 17, 72, -18, -91, -95, -83, -79, 29, 114, 72, -44, -109, 2, -44, -128, 29, 9, 94, 78, 19, -8, 29, 34, -127, -119, 32, 32, -113, -58, -39, 104, 42, -122, 90, -117, -11, 24, 127, -128, -38, 26, -119, 14, -115, -19, -103, 59, 117, -20, 103, -68, 118, -86, 59, -47, 3, 119, -95, 19, -53, 18, 114, -44, 40, 79, 21, -72, -35, 102, 96, -52, -119, 15, 118, -105, 7, 28, 94, 65, 26, 12, -86, 17, -83, 92, 50, 63, -128, -89, 62, -74, -47, -120, 61, -6, -30, -60, 64, 8, 61, 52, -86, 29, -86, -30, -98, -49, 39, -16, -76, 2, 20, 25, -13, 82, 105, 91, 52, -19, -94, -52, 89, 47, -58, -84, 79, 19, 61, 111, 102, 58, -71, -7, 40, 97, 24, 36, -96, 97, 21, 66, 34, 126, 68, 36, 71, -3, 103, -116, -118, 106, 114, 84, -26, 29, -17, 36, 101, -10, 76, 5, 107, -106, 4, 38, -109, -4, 53, -86, 29, 55, 97, 13, 71, 115, -104, -105, -88, 22, -4, -96, -78, -46, 39, -30, 104, 89, 6, -89, 74, -82, -94, -36, 50, -105, 42, -70, -70, -44, 107, 107, -37, -85, 75, 55, -93, -13, 64, -24, -52, 57, 97, 96, 41, 92, -101, -21, -109, 106, -111, 41, 71, 92, 59, 16, 40, 29, -13, -79, -86, -92, -47, 7, 55, -103, 42, 73, -112, -111, 29, -19, -92, -13, 54, 113, -31, -25, -87, -2, 18, 51, 7, 1, 19, 59, 80, -42, 108, 101, 115, -13, -68, 12, -112, -104, 47, -104, 3, -15, -96, 3, 47, 73, -10, 22, -23, 19, 2, 41, 61, 55, 48, 67, -16, 119, -58, -32, 104, -28, -20, -55, -109, -57, 51, 116, -126, -25, 127, 30, 9, 24, 107, 86, 119, -35, -124, -95, -91, -60, 86, 4, -102, -27, 100, 64, -83, -36, 106, 8, -68, 113, 40, 91, 96, -84, 113, -89, 37, 1, -108, -83, 79, -71, -112, 23, -96, -108, 13, 88, 22, 36, 83, 52, -41, 3, -45, 27, -36, -18, 28, -59, 49, -91, 1, 13, 88, 93, 11, 7, 71, -50, -45, 123, 56, 86, 113, 97, -87, 86, 123, -103, -70, -14, 76, -100, -124, 81, 116, 59, -21, -27, -126, 5, 100, -78, 91, 108, -111, 33, -18, -110, -55, 38, 109, 113, -113, 127, 28, -7, -100, 92, 116, 75, -83, -11, -127, -83, 21, -123, -76, -44, -79, -8, -32, 16, 90, 122, -65, -128, 111, 4, 126, -116, 71, 45, -9, -100, -23, -67, -106, -120, -49, 105, -13, 56, -111, -87, 100, 26, 82, 103, -35, -106, 54, -50, 30, 24, 127, -63, 117, 28, 33, 1, 17, 72, 64, 123, -36, -54, -125, -21, -12, 86, -93, -74, 24, -114, -75, -86, -63, 25, -26, 79, -19, 100, -86, -115, 5, 14, -25, -25, -77, 31, -3, -41, -90, 27, -31, 51, 112, 101, -61, 30, -73, -106, -84, 36, -74, -91, -49, 38, -115, -106, -30, -102, 72, 82, -29, 62, -128, -127, -36, -106, 48, 125, 107, -35, 0, -13, 87, -29, -71, -121, -119, 77, 24, 37, 92, 9, 5, 88, 14, -113, 65, 14, -98, -63, -123, -82, -26, -107, 108, -83, -127, 8, 90, 81, -85, -14, 112, 49, 113, -6, -59, 24, -26, -5, 70, 118, 93, -105, -27, 6, 107, -72, -31, 120, -100, -12, -117, 35, -61, -20, 78, 110, -94, 6, 96, 96, -56, -110, 46, -72, -75, -108, 21, 26, -123, -98, 120, -95, 98, 73, -63, -8, 60, -97, 124, 62, -98, 124, 100, 93, -120, 70, -64, 0, -6, 9, -98, -99, 83, 1, -41, 13, -13, -87, -76, -107, -52, 58, -51, 51, 69, 68, 99, 65, -109, -2, 56, -61, 52, -32, -115, -86, -93, -29, 91, -59, -12, -116, 61, -101, 64, -66, 93, -82, 95, 126, 111, 79, -18, -13, 5, 32, 72, 10, -3, 112, 50, 31, 24, 116, -53, 16, -62, -109, -104, 42, -93, 45, 97, -37, -3, -23, -59, -103, -13, -118, -75, -73, 58, -90, -6, -47, 123, 34, 23, -12, 10, 53, 119, 42, 52, 7, 63, -61, -47, -9, -58, -93, -33, 13, -37, 68, -70, 17, -14, -22, -39, -72, -6, 77, 4, -121, -76, -28, -48, -48, -120, -48, -80, 101, 126, -117, -23, -114, 51, 72, 42, -30, -86, -104, -101, -58, -125, -4, 57, -58, -93, -101, -73, 58, 92, -11, 57, -57, -125, 15, -70, -20, -104, -52, 7, -36, 42, 32, 118, -69, -42, -57, -69, 100, -68, 62, 94, 1, -40, 95, 19, -125, -79, 31, 115, -29, 29, -18, -95, 36, -117, 69, -30, 66, 122, -15, -63, -12, -95, 67, -4, 73, -68, 102, -98, 33, 30, 46, 124, -66, -45, 114, 14, 86, 31, 95, 50, 7, 97, 31, -104, 49, 124, -16, 97, -26, -37, -123, -75, -23, -1, 5, 79, 127, 35, -54, -80, -4, 36, 25, -38, -99, -30, 53, 17, 67, 99, 93, -15, -6, 41, 91, -72, -59, 43, -33, -19, -96, -126, -106, -59, -69, 87, -105, -97, -62, -4, 30, 31, -33, -72, -66, -123, -18, -24, -34, -83, -30, 14, -84, -53, -22, -67, -84, 110, 21, -1, 2, 99, 22, 108, 49, 44, 10, 0, 0] as byte[] as byte[]}}) as IItemStack;
recipes.addShapeless(bag_of_truth, [<contenttweaker:bag_of_truth_locked>, <contenttweaker:key_to_infinity>]);

# Bag of Truth (Locked), in case the player loses it
recipes.addShaped(<contenttweaker:bag_of_truth_locked>.withTag({display: {Name:"§d§lBag of Truth (Locked)"}}), [[null,<enderio:item_material:20>,null],[<enderio:item_material:20>,<extrautils2:bagofholding>,<enderio:item_material:20>],[null,<thermalfoundation:security>,null]]);

# Key to Infinity
mods.avaritia.ExtremeCrafting.addShaped("Key to Infinity", <contenttweaker:key_to_infinity>.withTag({display: {Name:"§d§lKey to Infinity"}}),
[[null,null,null,null,null,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,null],
[null,null,null,null,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>],
[null,null,null,null,<avaritia:block_resource:1>,<avaritia:block_resource:1>,null,<avaritia:block_resource:1>,<avaritia:block_resource:1>],
[null,null,null,null,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>],
[null,null,null,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,null],
[null,null,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,null,null,null,null],
[null,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,null,null,null,null,null],
[<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,<avaritia:block_resource:1>,null,null,null,null],
[<avaritia:block_resource:1>,<avaritia:block_resource:1>,null,<avaritia:block_resource:1>,null,null,null,null,null]]);

# Bag of Truth and Key to Infinity tooltips
<contenttweaker:bag_of_truth_locked>.addTooltip(format.red(format.bold("LOCKED")));
<contenttweaker:bag_of_truth_locked>.addTooltip(format.red("Requires a ") + format.lightPurple(format.bold("Key to Infinity")) + format.red(" to open."));
<contenttweaker:bag_of_truth_locked>.addTooltip(format.red("(This is the entire goal of the modpack.)"));
<contenttweaker:bag_of_truth_locked>.addTooltip(format.darkRed(format.italic("This is craftable, if you ever lose it.")));
<contenttweaker:bag_of_truth_locked>.addTooltip(format.darkRed(format.italic("Warning: Crafting deletes the input bag's inventory.")));
<contenttweaker:key_to_infinity>.addTooltip(format.red("Craft together with a ") + format.lightPurple(format.bold("Bag of Truth (Locked)")) + format.red(" to open it!"));

# Glyphs
val glyphs = [<contenttweaker:glyph_route>,<contenttweaker:glyph_bag>,<contenttweaker:glyph_tent>,<contenttweaker:glyph_waterfall>,<contenttweaker:glyph_tongue>,<contenttweaker:glyph_scythe>,<contenttweaker:glyph_blockade>,<contenttweaker:glyph_lash>,<contenttweaker:glyph_slash>,<contenttweaker:glyph_rod>,<contenttweaker:glyph_split>,<contenttweaker:glyph_shield>,<contenttweaker:glyph_war>,<contenttweaker:glyph_cross>,<contenttweaker:glyph_stamp>,<contenttweaker:glyph_connection>,<contenttweaker:glyph_fork>,<contenttweaker:glyph_wave>,<contenttweaker:glyph_lightning>,<contenttweaker:glyph_pair>,<contenttweaker:glyph_fish>,<contenttweaker:glyph_weaving>,<contenttweaker:glyph_stand>,<contenttweaker:glyph_lion>,<contenttweaker:glyph_mirror>,<contenttweaker:glyph_electricity>] as IItemStack[];
val glyph_inputs = [<contenttweaker:essence_of_ways>,<projecte:item.pe_alchemical_bag:14>,<totemic:tipi>,<mysticalagriculture:watering_can:4>,<bewitchment:tongue_of_dog>,<mysticalagriculture:supremium_scythe>,<extrautils2:compressedcobblestone:7>,<bewitchment:hellhound_horn>,<divinerpg:sandslash>,<lightningcraft:rod:9>,<contenttweaker:highly_radioactive_dimension_splitting_compound>,<spartanshields:shield_tc_void>,<avaritia:infinity_sword>,<rftoolsdim:dimensional_cross_block>,<openblocks:stencil>,<actuallyadditions:item_phantom_connector>,<agricraft:rake:1>,<contenttweaker:aquasalus>,<contenttweaker:lightning_charge>,<draconicevolution:dislocator_bound:1>,<minecraft:fish>,<botania:manaresource:22>,<minecraft:armor_stand>,<erebus:antlion_egg>,<thaumicaugmentation:impetus_mirror>,<extendedcrafting:singularity_custom:103>] as IItemStack[];
for i in 0 to 26 {
	recipes.addShapeless(glyphs[i], [<mysticalagradditions:stuff:69>,glyph_inputs[i]]);
	glyphs[i].addTooltip(format.darkRed(format.italic("I think I might have seen characters like")));
	glyphs[i].addTooltip(format.darkRed(format.italic("these written on Tablets and the highest")));
	glyphs[i].addTooltip(format.darkRed(format.italic("tier Blood Orb back in Chapter 18...")));
}

# IT1
recipes.addHiddenShaped("it1", <contenttweaker:it1>, [[<contenttweaker:glyph_fork>, <contenttweaker:glyph_lash>, <contenttweaker:glyph_lash>],[<contenttweaker:glyph_fish>, <contenttweaker:glyph_pair>, <contenttweaker:glyph_scythe>],[<contenttweaker:glyph_tent>, <contenttweaker:glyph_wave>, null]]);
mods.jei.JEI.hide(<contenttweaker:it1>);

# IT2
recipes.addHiddenShaped("it2", <contenttweaker:it2>, [[<contenttweaker:glyph_tongue>, <contenttweaker:glyph_shield>, <contenttweaker:glyph_fish>],[<contenttweaker:glyph_fish>, <contenttweaker:glyph_waterfall>, null],[null, null, null]]);
mods.jei.JEI.hide(<contenttweaker:it2>);

# IT3
recipes.addHiddenShaped("it3", <contenttweaker:it3>, [[<contenttweaker:glyph_wave>,<contenttweaker:glyph_fork>,<contenttweaker:glyph_mirror>],[<contenttweaker:glyph_wave>,<contenttweaker:glyph_fork>,<contenttweaker:glyph_mirror>],[<contenttweaker:glyph_wave>,<contenttweaker:glyph_fork>,<contenttweaker:glyph_mirror>]]);
mods.jei.JEI.hide(<contenttweaker:it3>);

# IT4
recipes.addHiddenShaped("it4", <contenttweaker:it4>, [[<contenttweaker:glyph_tent>,<contenttweaker:glyph_shield>,<contenttweaker:glyph_lash>],[<contenttweaker:glyph_lash>,<contenttweaker:glyph_shield>,<contenttweaker:glyph_tent>],[<contenttweaker:glyph_tent>,<contenttweaker:glyph_shield>,<contenttweaker:glyph_lash>]]);
mods.jei.JEI.hide(<contenttweaker:it4>);

# IT5
mods.biggercraftingtables.Giant.addShaped(<contenttweaker:it5>,
[[<contenttweaker:puzzle_tile_gbbgr>, <contenttweaker:puzzle_tile_gbggr>, <contenttweaker:puzzle_tile_gbgog>, <contenttweaker:puzzle_tile_obgoo>, <contenttweaker:puzzle_tile_obooo>, <contenttweaker:puzzle_tile_obokr>, <contenttweaker:puzzle_tile_kbokk>, <contenttweaker:puzzle_tile_kbkkr>, <contenttweaker:puzzle_tile_kbkbk>], 
[<contenttweaker:puzzle_tile_rgbrr>, <contenttweaker:puzzle_tile_rgrgg>, <contenttweaker:puzzle_tile_ggror>, <contenttweaker:puzzle_tile_oogoo>, <contenttweaker:puzzle_tile_oooro>, <contenttweaker:puzzle_tile_rookr>, <contenttweaker:puzzle_tile_kkrrr>, <contenttweaker:puzzle_tile_rkkkk>, <contenttweaker:puzzle_tile_kkrbr>], 
[<contenttweaker:puzzle_tile_rrbgr>, <contenttweaker:puzzle_tile_grrrg>, <contenttweaker:puzzle_tile_rggor>, <contenttweaker:puzzle_tile_ooroo>, <contenttweaker:puzzle_tile_oooro>, <contenttweaker:puzzle_tile_rrorr>, <contenttweaker:puzzle_tile_rkrkk>, <contenttweaker:puzzle_tile_krrrk>, <contenttweaker:puzzle_tile_rkkbr>], 
[<contenttweaker:puzzle_tile_rrbgr>, <contenttweaker:puzzle_tile_ggrrg>, <contenttweaker:puzzle_tile_rrgor>, <contenttweaker:puzzle_tile_ooroo>, <contenttweaker:puzzle_tile_oooro>, <contenttweaker:puzzle_tile_rrokr>, <contenttweaker:puzzle_tile_krrkk>, <contenttweaker:puzzle_tile_kkkrr>, <contenttweaker:puzzle_tile_rrkbk>], 
[<contenttweaker:puzzle_tile_rrbgr>, <contenttweaker:puzzle_tile_ggrrg>, <contenttweaker:puzzle_tile_rrgor>, <contenttweaker:puzzle_tile_ooroo>, <contenttweaker:puzzle_tile_oooro>, <contenttweaker:puzzle_tile_rrokr>, <contenttweaker:puzzle_tile_kkrrr>, <contenttweaker:puzzle_tile_rkkkk>, <contenttweaker:puzzle_tile_krrbk>], 
[<contenttweaker:puzzle_tile_rrbgr>, <contenttweaker:puzzle_tile_ggrrg>, <contenttweaker:puzzle_tile_rrgor>, <contenttweaker:puzzle_tile_ooroo>, <contenttweaker:puzzle_tile_oooro>, <contenttweaker:puzzle_tile_rrorr>, <contenttweaker:puzzle_tile_rkrkr>, <contenttweaker:puzzle_tile_krrkk>, <contenttweaker:puzzle_tile_kkkbk>], 
[<contenttweaker:puzzle_tile_rrbgr>, <contenttweaker:puzzle_tile_ggrrr>, <contenttweaker:puzzle_tile_rrgog>, <contenttweaker:puzzle_tile_ooror>, <contenttweaker:puzzle_tile_ooorr>, <contenttweaker:puzzle_tile_rroro>, <contenttweaker:puzzle_tile_rrrkr>, <contenttweaker:puzzle_tile_kkrkr>, <contenttweaker:puzzle_tile_kkkbr>], 
[<contenttweaker:puzzle_tile_rrbrg>, <contenttweaker:puzzle_tile_rgrgg>, <contenttweaker:puzzle_tile_grrrg>, <contenttweaker:puzzle_tile_rogro>, <contenttweaker:puzzle_tile_roroo>, <contenttweaker:puzzle_tile_orrro>, <contenttweaker:puzzle_tile_rrork>, <contenttweaker:puzzle_tile_rkrrk>, <contenttweaker:puzzle_tile_rkrbk>], 
[<contenttweaker:puzzle_tile_grbgb>, <contenttweaker:puzzle_tile_grggb>, <contenttweaker:puzzle_tile_gggob>, <contenttweaker:puzzle_tile_orgob>, <contenttweaker:puzzle_tile_oroob>, <contenttweaker:puzzle_tile_oookb>, <contenttweaker:puzzle_tile_krokb>, <contenttweaker:puzzle_tile_krkkb>, <contenttweaker:puzzle_tile_krkbb>]]);
mods.jei.JEI.hide(<contenttweaker:it5>);
mods.jei.JEI.hideCategory("biggerct.big");
mods.jei.JEI.hideCategory("biggerct.huge");
mods.jei.JEI.hideCategory("biggerct.giant");
<biggercraftingtables:biggercraftingtable:2>.displayName = "Jigsaw Puzzle Crafting Table";

# Puzzle Pieces Backpack
#val puzzle_pieces_backpack = <ironbackpacks:backpack>.withTag({packInfo: {upgrade: [], type: "ironbackpacks:diamond", spec: "STORAGE"}, RepairCost: 0, display: {Name: "§b§lPuzzle Pieces"}, packInv: [{id: "contenttweaker:puzzle_tile_oooro", Count: 5 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrbgr", Count: 5 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_ooroo", Count: 4 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrgor", Count: 3 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_ggrrg", Count: 3 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrorr", Count: 2 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kkrrr", Count: 2 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rkkkk", Count: 2 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_grrrg", Count: 2 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_krrkk", Count: 2 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrokr", Count: 2 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rgrgg", Count: 2 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_ggror", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_oogoo", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rookr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_obgoo", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_gbgog", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrork", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kbkkr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rggor", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kbkbk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_gbggr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rkrkk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_krrrk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rkkbr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rgbrr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kbokk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_obokr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_gbbgr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_obooo", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrkbk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_krrbk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rkrkr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_ggrrr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kkkrr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_ooror", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_krkkb", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rroro", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrrkr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kkrkr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_roroo", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_orgob", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_grbgb", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rkrbk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rkrrk", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_orrro", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kkkbr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrgog", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_grggb", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_krokb", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rrbrg", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_oookb", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_gggob", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_ooorr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_krkbb", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kkrbr", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_rogro", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_oroob", Count: 1 as byte, Damage: 0 as short}, {id: "contenttweaker:puzzle_tile_kkkbk", Count: 1 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}, {id: "minecraft:air", Count: 2 as byte, Damage: 0 as short}]}) as IItemStack;
#val puzzle_pieces_backpack = <simplybackpacks:epicbackpack>.withTag({display: {Name: "§d§lPuzzle Pieces"}, inv: {Size: 99, Items: [{Slot: 0, id: "contenttweaker:puzzle_tile_oooro", Count: 5 as byte, Damage: 0 as short}, {Slot: 1, id: "contenttweaker:puzzle_tile_rrbgr", Count: 5 as byte, Damage: 0 as short}, {Slot: 2, id: "contenttweaker:puzzle_tile_ooroo", Count: 4 as byte, Damage: 0 as short}, {Slot: 3, id: "contenttweaker:puzzle_tile_rrgor", Count: 3 as byte, Damage: 0 as short}, {Slot: 4, id: "contenttweaker:puzzle_tile_ggrrg", Count: 3 as byte, Damage: 0 as short}, {Slot: 5, id: "contenttweaker:puzzle_tile_rrorr", Count: 2 as byte, Damage: 0 as short}, {Slot: 6, id: "contenttweaker:puzzle_tile_kkrrr", Count: 2 as byte, Damage: 0 as short}, {Slot: 7, id: "contenttweaker:puzzle_tile_rkkkk", Count: 2 as byte, Damage: 0 as short}, {Slot: 8, id: "contenttweaker:puzzle_tile_grrrg", Count: 2 as byte, Damage: 0 as short}, {Slot: 9, id: "contenttweaker:puzzle_tile_krrkk", Count: 2 as byte, Damage: 0 as short}, {Slot: 10, id: "contenttweaker:puzzle_tile_rrokr", Count: 2 as byte, Damage: 0 as short}, {Slot: 11, id: "contenttweaker:puzzle_tile_rgrgg", Count: 2 as byte, Damage: 0 as short}, {Slot: 12, id: "contenttweaker:puzzle_tile_ggror", Count: 1 as byte, Damage: 0 as short}, {Slot: 13, id: "contenttweaker:puzzle_tile_oogoo", Count: 1 as byte, Damage: 0 as short}, {Slot: 14, id: "contenttweaker:puzzle_tile_rookr", Count: 1 as byte, Damage: 0 as short}, {Slot: 15, id: "contenttweaker:puzzle_tile_obgoo", Count: 1 as byte, Damage: 0 as short}, {Slot: 16, id: "contenttweaker:puzzle_tile_gbgog", Count: 1 as byte, Damage: 0 as short}, {Slot: 17, id: "contenttweaker:puzzle_tile_rrork", Count: 1 as byte, Damage: 0 as short}, {Slot: 18, id: "contenttweaker:puzzle_tile_kbkkr", Count: 1 as byte, Damage: 0 as short}, {Slot: 19, id: "contenttweaker:puzzle_tile_rggor", Count: 1 as byte, Damage: 0 as short}, {Slot: 20, id: "contenttweaker:puzzle_tile_kbkbk", Count: 1 as byte, Damage: 0 as short}, {Slot: 21, id: "contenttweaker:puzzle_tile_gbggr", Count: 1 as byte, Damage: 0 as short}, {Slot: 22, id: "contenttweaker:puzzle_tile_rkrkk", Count: 1 as byte, Damage: 0 as short}, {Slot: 23, id: "contenttweaker:puzzle_tile_krrrk", Count: 1 as byte, Damage: 0 as short}, {Slot: 24, id: "contenttweaker:puzzle_tile_rkkbr", Count: 1 as byte, Damage: 0 as short}, {Slot: 25, id: "contenttweaker:puzzle_tile_rgbrr", Count: 1 as byte, Damage: 0 as short}, {Slot: 26, id: "contenttweaker:puzzle_tile_kbokk", Count: 1 as byte, Damage: 0 as short}, {Slot: 27, id: "contenttweaker:puzzle_tile_obokr", Count: 1 as byte, Damage: 0 as short}, {Slot: 28, id: "contenttweaker:puzzle_tile_gbbgr", Count: 1 as byte, Damage: 0 as short}, {Slot: 29, id: "contenttweaker:puzzle_tile_obooo", Count: 1 as byte, Damage: 0 as short}, {Slot: 30, id: "contenttweaker:puzzle_tile_rrkbk", Count: 1 as byte, Damage: 0 as short}, {Slot: 31, id: "contenttweaker:puzzle_tile_krrbk", Count: 1 as byte, Damage: 0 as short}, {Slot: 32, id: "contenttweaker:puzzle_tile_rkrkr", Count: 1 as byte, Damage: 0 as short}, {Slot: 33, id: "contenttweaker:puzzle_tile_ggrrr", Count: 1 as byte, Damage: 0 as short}, {Slot: 34, id: "contenttweaker:puzzle_tile_kkkrr", Count: 1 as byte, Damage: 0 as short}, {Slot: 35, id: "contenttweaker:puzzle_tile_ooror", Count: 1 as byte, Damage: 0 as short}, {Slot: 36, id: "contenttweaker:puzzle_tile_krkkb", Count: 1 as byte, Damage: 0 as short}, {Slot: 37, id: "contenttweaker:puzzle_tile_rroro", Count: 1 as byte, Damage: 0 as short}, {Slot: 38, id: "contenttweaker:puzzle_tile_rrrkr", Count: 1 as byte, Damage: 0 as short}, {Slot: 39, id: "contenttweaker:puzzle_tile_kkrkr", Count: 1 as byte, Damage: 0 as short}, {Slot: 40, id: "contenttweaker:puzzle_tile_roroo", Count: 1 as byte, Damage: 0 as short}, {Slot: 41, id: "contenttweaker:puzzle_tile_orgob", Count: 1 as byte, Damage: 0 as short}, {Slot: 42, id: "contenttweaker:puzzle_tile_grbgb", Count: 1 as byte, Damage: 0 as short}, {Slot: 43, id: "contenttweaker:puzzle_tile_rkrbk", Count: 1 as byte, Damage: 0 as short}, {Slot: 44, id: "contenttweaker:puzzle_tile_rkrrk", Count: 1 as byte, Damage: 0 as short}, {Slot: 45, id: "contenttweaker:puzzle_tile_orrro", Count: 1 as byte, Damage: 0 as short}, {Slot: 46, id: "contenttweaker:puzzle_tile_kkkbr", Count: 1 as byte, Damage: 0 as short}, {Slot: 47, id: "contenttweaker:puzzle_tile_rrgog", Count: 1 as byte, Damage: 0 as short}, {Slot: 48, id: "contenttweaker:puzzle_tile_grggb", Count: 1 as byte, Damage: 0 as short}, {Slot: 49, id: "contenttweaker:puzzle_tile_krokb", Count: 1 as byte, Damage: 0 as short}, {Slot: 50, id: "contenttweaker:puzzle_tile_rrbrg", Count: 1 as byte, Damage: 0 as short}, {Slot: 51, id: "contenttweaker:puzzle_tile_oookb", Count: 1 as byte, Damage: 0 as short}, {Slot: 52, id: "contenttweaker:puzzle_tile_gggob", Count: 1 as byte, Damage: 0 as short}, {Slot: 53, id: "contenttweaker:puzzle_tile_ooorr", Count: 1 as byte, Damage: 0 as short}, {Slot: 54, id: "contenttweaker:puzzle_tile_krkbb", Count: 1 as byte, Damage: 0 as short}, {Slot: 55, id: "contenttweaker:puzzle_tile_kkrbr", Count: 1 as byte, Damage: 0 as short}, {Slot: 56, id: "contenttweaker:puzzle_tile_rogro", Count: 1 as byte, Damage: 0 as short}, {Slot: 57, id: "contenttweaker:puzzle_tile_oroob", Count: 1 as byte, Damage: 0 as short}, {Slot: 58, id: "contenttweaker:puzzle_tile_kkkbk", Count: 1 as byte, Damage: 0 as short}]}, filter: {Size: 16, Items: []}}) as IItemStack;
#val puzzle_pieces_backpack = <thermalexpansion:satchel:4>.withTag({ench: [{lvl: 4 as short, id: 68 as short}], Inventory: {Slot13: {id: "contenttweaker:puzzle_tile_oogoo", Count: 1 as byte, Damage: 0 as short}, Slot57: {id: "contenttweaker:puzzle_tile_oroob", Count: 1 as byte, Damage: 0 as short}, Slot14: {id: "contenttweaker:puzzle_tile_rookr", Count: 1 as byte, Damage: 0 as short}, Slot58: {id: "contenttweaker:puzzle_tile_kkkbk", Count: 1 as byte, Damage: 0 as short}, Slot15: {id: "contenttweaker:puzzle_tile_obgoo", Count: 1 as byte, Damage: 0 as short}, Slot16: {id: "contenttweaker:puzzle_tile_gbgog", Count: 1 as byte, Damage: 0 as short}, Slot17: {id: "contenttweaker:puzzle_tile_rrork", Count: 1 as byte, Damage: 0 as short}, Slot18: {id: "contenttweaker:puzzle_tile_kbkkr", Count: 1 as byte, Damage: 0 as short}, Slot19: {id: "contenttweaker:puzzle_tile_rggor", Count: 1 as byte, Damage: 0 as short}, Slot2: {id: "contenttweaker:puzzle_tile_ooroo", Count: 4 as byte, Damage: 0 as short}, Slot3: {id: "contenttweaker:puzzle_tile_rrgor", Count: 3 as byte, Damage: 0 as short}, Slot4: {id: "contenttweaker:puzzle_tile_ggrrg", Count: 3 as byte, Damage: 0 as short}, Slot5: {id: "contenttweaker:puzzle_tile_rrorr", Count: 2 as byte, Damage: 0 as short}, Slot20: {id: "contenttweaker:puzzle_tile_kbkbk", Count: 1 as byte, Damage: 0 as short}, Slot21: {id: "contenttweaker:puzzle_tile_gbggr", Count: 1 as byte, Damage: 0 as short}, Slot0: {id: "contenttweaker:puzzle_tile_oooro", Count: 5 as byte, Damage: 0 as short}, Slot22: {id: "contenttweaker:puzzle_tile_rkrkk", Count: 1 as byte, Damage: 0 as short}, Slot1: {id: "contenttweaker:puzzle_tile_rrbgr", Count: 5 as byte, Damage: 0 as short}, Slot23: {id: "contenttweaker:puzzle_tile_krrrk", Count: 1 as byte, Damage: 0 as short}, Slot6: {id: "contenttweaker:puzzle_tile_kkrrr", Count: 2 as byte, Damage: 0 as short}, Slot7: {id: "contenttweaker:puzzle_tile_rkkkk", Count: 2 as byte, Damage: 0 as short}, Slot8: {id: "contenttweaker:puzzle_tile_grrrg", Count: 2 as byte, Damage: 0 as short}, Slot9: {id: "contenttweaker:puzzle_tile_krrkk", Count: 2 as byte, Damage: 0 as short}, Slot24: {id: "contenttweaker:puzzle_tile_rkkbr", Count: 1 as byte, Damage: 0 as short}, Slot25: {id: "contenttweaker:puzzle_tile_rgbrr", Count: 1 as byte, Damage: 0 as short}, Slot26: {id: "contenttweaker:puzzle_tile_kbokk", Count: 1 as byte, Damage: 0 as short}, Slot27: {id: "contenttweaker:puzzle_tile_obokr", Count: 1 as byte, Damage: 0 as short}, Slot28: {id: "contenttweaker:puzzle_tile_gbbgr", Count: 1 as byte, Damage: 0 as short}, Slot29: {id: "contenttweaker:puzzle_tile_obooo", Count: 1 as byte, Damage: 0 as short}, Slot30: {id: "contenttweaker:puzzle_tile_rrkbk", Count: 1 as byte, Damage: 0 as short}, Slot31: {id: "contenttweaker:puzzle_tile_krrbk", Count: 1 as byte, Damage: 0 as short}, Slot32: {id: "contenttweaker:puzzle_tile_rkrkr", Count: 1 as byte, Damage: 0 as short}, Slot33: {id: "contenttweaker:puzzle_tile_ggrrr", Count: 1 as byte, Damage: 0 as short}, Slot34: {id: "contenttweaker:puzzle_tile_kkkrr", Count: 1 as byte, Damage: 0 as short}, Slot35: {id: "contenttweaker:puzzle_tile_ooror", Count: 1 as byte, Damage: 0 as short}, Slot36: {id: "contenttweaker:puzzle_tile_krkkb", Count: 1 as byte, Damage: 0 as short}, Slot37: {id: "contenttweaker:puzzle_tile_rroro", Count: 1 as byte, Damage: 0 as short}, Slot38: {id: "contenttweaker:puzzle_tile_rrrkr", Count: 1 as byte, Damage: 0 as short}, Slot39: {id: "contenttweaker:puzzle_tile_kkrkr", Count: 1 as byte, Damage: 0 as short}, Slot40: {id: "contenttweaker:puzzle_tile_roroo", Count: 1 as byte, Damage: 0 as short}, Slot41: {id: "contenttweaker:puzzle_tile_orgob", Count: 1 as byte, Damage: 0 as short}, Slot42: {id: "contenttweaker:puzzle_tile_grbgb", Count: 1 as byte, Damage: 0 as short}, Slot43: {id: "contenttweaker:puzzle_tile_rkrbk", Count: 1 as byte, Damage: 0 as short}, Slot44: {id: "contenttweaker:puzzle_tile_rkrrk", Count: 1 as byte, Damage: 0 as short}, Slot45: {id: "contenttweaker:puzzle_tile_orrro", Count: 1 as byte, Damage: 0 as short}, Slot46: {id: "contenttweaker:puzzle_tile_kkkbr", Count: 1 as byte, Damage: 0 as short}, Slot47: {id: "contenttweaker:puzzle_tile_rrgog", Count: 1 as byte, Damage: 0 as short}, Slot48: {id: "contenttweaker:puzzle_tile_grggb", Count: 1 as byte, Damage: 0 as short}, Slot49: {id: "contenttweaker:puzzle_tile_krokb", Count: 1 as byte, Damage: 0 as short}, Slot50: {id: "contenttweaker:puzzle_tile_rrbrg", Count: 1 as byte, Damage: 0 as short}, Slot51: {id: "contenttweaker:puzzle_tile_oookb", Count: 1 as byte, Damage: 0 as short}, Slot52: {id: "contenttweaker:puzzle_tile_gggob", Count: 1 as byte, Damage: 0 as short}, Slot53: {id: "contenttweaker:puzzle_tile_ooorr", Count: 1 as byte, Damage: 0 as short}, Slot10: {id: "contenttweaker:puzzle_tile_rrokr", Count: 2 as byte, Damage: 0 as short}, Slot54: {id: "contenttweaker:puzzle_tile_krkbb", Count: 1 as byte, Damage: 0 as short}, Slot11: {id: "contenttweaker:puzzle_tile_rgrgg", Count: 2 as byte, Damage: 0 as short}, Slot55: {id: "contenttweaker:puzzle_tile_kkrbr", Count: 1 as byte, Damage: 0 as short}, Slot12: {id: "contenttweaker:puzzle_tile_ggror", Count: 1 as byte, Damage: 0 as short}, Slot56: {id: "contenttweaker:puzzle_tile_rogro", Count: 1 as byte, Damage: 0 as short}}, Accessible: 1 as byte, display: {Name: "§b§lPuzzle Pieces"}}) as IItemStack;
val puzzle_pieces_backpack = <ironchest:iron_shulker_box_magenta:2>.withTag({BlockEntityTag: {facing: 1 as byte, Items: [{Slot: 0 as byte, id: "contenttweaker:puzzle_tile_oooro", Count: 5 as byte, Damage: 0 as short}, {Slot: 1 as byte, id: "contenttweaker:puzzle_tile_rrbgr", Count: 5 as byte, Damage: 0 as short}, {Slot: 2 as byte, id: "contenttweaker:puzzle_tile_ooroo", Count: 4 as byte, Damage: 0 as short}, {Slot: 3 as byte, id: "contenttweaker:puzzle_tile_rrgor", Count: 3 as byte, Damage: 0 as short}, {Slot: 4 as byte, id: "contenttweaker:puzzle_tile_ggrrg", Count: 3 as byte, Damage: 0 as short}, {Slot: 5 as byte, id: "contenttweaker:puzzle_tile_kkrrr", Count: 2 as byte, Damage: 0 as short}, {Slot: 6 as byte, id: "contenttweaker:puzzle_tile_rrorr", Count: 2 as byte, Damage: 0 as short}, {Slot: 7 as byte, id: "contenttweaker:puzzle_tile_krrkk", Count: 2 as byte, Damage: 0 as short}, {Slot: 8 as byte, id: "contenttweaker:puzzle_tile_rkkkk", Count: 2 as byte, Damage: 0 as short}, {Slot: 9 as byte, id: "contenttweaker:puzzle_tile_grrrg", Count: 2 as byte, Damage: 0 as short}, {Slot: 10 as byte, id: "contenttweaker:puzzle_tile_rgrgg", Count: 2 as byte, Damage: 0 as short}, {Slot: 11 as byte, id: "contenttweaker:puzzle_tile_rrokr", Count: 2 as byte, Damage: 0 as short}, {Slot: 12 as byte, id: "contenttweaker:puzzle_tile_ggror", Count: 1 as byte, Damage: 0 as short}, {Slot: 13 as byte, id: "contenttweaker:puzzle_tile_rookr", Count: 1 as byte, Damage: 0 as short}, {Slot: 14 as byte, id: "contenttweaker:puzzle_tile_gbgog", Count: 1 as byte, Damage: 0 as short}, {Slot: 15 as byte, id: "contenttweaker:puzzle_tile_obgoo", Count: 1 as byte, Damage: 0 as short}, {Slot: 16 as byte, id: "contenttweaker:puzzle_tile_rrork", Count: 1 as byte, Damage: 0 as short}, {Slot: 17 as byte, id: "contenttweaker:puzzle_tile_oogoo", Count: 1 as byte, Damage: 0 as short}, {Slot: 18 as byte, id: "contenttweaker:puzzle_tile_rgbrr", Count: 1 as byte, Damage: 0 as short}, {Slot: 19 as byte, id: "contenttweaker:puzzle_tile_rkkbr", Count: 1 as byte, Damage: 0 as short}, {Slot: 20 as byte, id: "contenttweaker:puzzle_tile_krrrk", Count: 1 as byte, Damage: 0 as short}, {Slot: 21 as byte, id: "contenttweaker:puzzle_tile_rkrkk", Count: 1 as byte, Damage: 0 as short}, {Slot: 22 as byte, id: "contenttweaker:puzzle_tile_gbggr", Count: 1 as byte, Damage: 0 as short}, {Slot: 23 as byte, id: "contenttweaker:puzzle_tile_kbkbk", Count: 1 as byte, Damage: 0 as short}, {Slot: 24 as byte, id: "contenttweaker:puzzle_tile_rggor", Count: 1 as byte, Damage: 0 as short}, {Slot: 25 as byte, id: "contenttweaker:puzzle_tile_kbkkr", Count: 1 as byte, Damage: 0 as short}, {Slot: 26 as byte, id: "contenttweaker:puzzle_tile_kkkrr", Count: 1 as byte, Damage: 0 as short}, {Slot: 27 as byte, id: "contenttweaker:puzzle_tile_ggrrr", Count: 1 as byte, Damage: 0 as short}, {Slot: 28 as byte, id: "contenttweaker:puzzle_tile_rkrkr", Count: 1 as byte, Damage: 0 as short}, {Slot: 29 as byte, id: "contenttweaker:puzzle_tile_krrbk", Count: 1 as byte, Damage: 0 as short}, {Slot: 30 as byte, id: "contenttweaker:puzzle_tile_rrkbk", Count: 1 as byte, Damage: 0 as short}, {Slot: 31 as byte, id: "contenttweaker:puzzle_tile_obooo", Count: 1 as byte, Damage: 0 as short}, {Slot: 32 as byte, id: "contenttweaker:puzzle_tile_gbbgr", Count: 1 as byte, Damage: 0 as short}, {Slot: 33 as byte, id: "contenttweaker:puzzle_tile_obokr", Count: 1 as byte, Damage: 0 as short}, {Slot: 34 as byte, id: "contenttweaker:puzzle_tile_kbokk", Count: 1 as byte, Damage: 0 as short}, {Slot: 35 as byte, id: "contenttweaker:puzzle_tile_ooror", Count: 1 as byte, Damage: 0 as short}, {Slot: 36 as byte, id: "contenttweaker:puzzle_tile_rkrbk", Count: 1 as byte, Damage: 0 as short}, {Slot: 37 as byte, id: "contenttweaker:puzzle_tile_grbgb", Count: 1 as byte, Damage: 0 as short}, {Slot: 38 as byte, id: "contenttweaker:puzzle_tile_orgob", Count: 1 as byte, Damage: 0 as short}, {Slot: 39 as byte, id: "contenttweaker:puzzle_tile_roroo", Count: 1 as byte, Damage: 0 as short}, {Slot: 40 as byte, id: "contenttweaker:puzzle_tile_kkrkr", Count: 1 as byte, Damage: 0 as short}, {Slot: 41 as byte, id: "contenttweaker:puzzle_tile_rrrkr", Count: 1 as byte, Damage: 0 as short}, {Slot: 42 as byte, id: "contenttweaker:puzzle_tile_rroro", Count: 1 as byte, Damage: 0 as short}, {Slot: 43 as byte, id: "contenttweaker:puzzle_tile_krkkb", Count: 1 as byte, Damage: 0 as short}, {Slot: 44 as byte, id: "contenttweaker:puzzle_tile_gggob", Count: 1 as byte, Damage: 0 as short}, {Slot: 45 as byte, id: "contenttweaker:puzzle_tile_oookb", Count: 1 as byte, Damage: 0 as short}, {Slot: 46 as byte, id: "contenttweaker:puzzle_tile_rrbrg", Count: 1 as byte, Damage: 0 as short}, {Slot: 47 as byte, id: "contenttweaker:puzzle_tile_krokb", Count: 1 as byte, Damage: 0 as short}, {Slot: 48 as byte, id: "contenttweaker:puzzle_tile_grggb", Count: 1 as byte, Damage: 0 as short}, {Slot: 49 as byte, id: "contenttweaker:puzzle_tile_rrgog", Count: 1 as byte, Damage: 0 as short}, {Slot: 50 as byte, id: "contenttweaker:puzzle_tile_kkkbr", Count: 1 as byte, Damage: 0 as short}, {Slot: 51 as byte, id: "contenttweaker:puzzle_tile_orrro", Count: 1 as byte, Damage: 0 as short}, {Slot: 52 as byte, id: "contenttweaker:puzzle_tile_rkrrk", Count: 1 as byte, Damage: 0 as short}, {Slot: 53 as byte, id: "contenttweaker:puzzle_tile_ooorr", Count: 1 as byte, Damage: 0 as short}, {Slot: 54 as byte, id: "contenttweaker:puzzle_tile_kkkbk", Count: 1 as byte, Damage: 0 as short}, {Slot: 55 as byte, id: "contenttweaker:puzzle_tile_oroob", Count: 1 as byte, Damage: 0 as short}, {Slot: 56 as byte, id: "contenttweaker:puzzle_tile_rogro", Count: 1 as byte, Damage: 0 as short}, {Slot: 57 as byte, id: "contenttweaker:puzzle_tile_kkrbr", Count: 1 as byte, Damage: 0 as short}, {Slot: 58 as byte, id: "contenttweaker:puzzle_tile_krkbb", Count: 1 as byte, Damage: 0 as short}], ShulkerBoxSize: 108}, display: {Name: "§d§lPuzzle Pieces"}}) as IItemStack;
recipes.addShaped(puzzle_pieces_backpack, [[<contenttweaker:essence_of_thought>,<contenttweaker:creative_singularity>,<contenttweaker:essence_of_thought>],[<contenttweaker:creative_singularity>,<ironchest:iron_shulker_box_magenta:2>,<contenttweaker:creative_singularity>],[<contenttweaker:essence_of_thought>,<contenttweaker:creative_singularity>,<contenttweaker:essence_of_thought>]]);
mods.jei.JEI.addItem(puzzle_pieces_backpack);

# Corrupted Key to Infinity
recipes.addHiddenShaped("ckoi", <contenttweaker:corrupted_key_to_infinity>, [[<contenttweaker:key_to_infinity>,<contenttweaker:it5>,<contenttweaker:key_to_infinity>],[<contenttweaker:it4>,<contenttweaker:it3>,<contenttweaker:it2>],[<contenttweaker:key_to_infinity>,<contenttweaker:it1>,<contenttweaker:key_to_infinity>]]);
mods.jei.JEI.hide(<contenttweaker:corrupted_key_to_infinity>);

# Encoded Bag of Corrupted Truth
val bag_of_corrupted_truth = <extrautils2:bagofholding>.withTag({display: {Lore: ["§c§lUNLOCKED"], Name: "§4§lBag of ᚨᛗᚣᚨᚢ"}, Items: {B: [8, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108] as byte[] as byte[], C: [8, 3, 119, 101, 98] as byte[] as byte[], H: [8, 23, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 100, 101, 109, 111, 110, 95, 104, 101, 97, 114, 116] as byte[] as byte[], I: [8, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108] as byte[] as byte[], J: [8, 26, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 104, 101, 108, 108, 104, 111, 117, 110, 100, 95, 104, 111, 114, 110] as byte[] as byte[], K: [8, 3, 119, 101, 98] as byte[] as byte[], L: [8, 26, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 100, 101, 109, 111, 110, 105, 99, 95, 101, 108, 105, 120, 105, 114] as byte[] as byte[], M: [9, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108, 0, 3] as byte[] as byte[], N: [8, 3, 119, 101, 98] as byte[] as byte[], P: [8, 26, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 104, 101, 108, 108, 104, 111, 117, 110, 100, 95, 104, 111, 114, 110] as byte[] as byte[], Q: [8, 3, 119, 101, 98] as byte[] as byte[], R: [9, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108, 0, 3] as byte[] as byte[], a: [8, 26, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 104, 101, 108, 108, 104, 111, 117, 110, 100, 95, 104, 111, 114, 110] as byte[] as byte[], f: [8, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108] as byte[] as byte[], g: [8, 26, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 100, 101, 109, 111, 110, 105, 99, 95, 101, 108, 105, 120, 105, 114] as byte[] as byte[], h: [9, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108, 0, 3] as byte[] as byte[], i: [8, 26, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 100, 101, 109, 111, 110, 105, 99, 95, 101, 108, 105, 120, 105, 114] as byte[] as byte[], j: [8, 3, 119, 101, 98] as byte[] as byte[], m: [10, 12, 119, 114, 105, 116, 116, 101, 110, 95, 98, 111, 111, 107, 1, -36, 31, -117, 8, 0, 0, 0, 0, 0, 0, 0, -115, 83, -63, 74, -61, 64, 16, 93, 17, -91, 122, -16, -20, 49, -26, 92, -118, -120, 32, 120, -15, -20, 63, -12, -30, -95, -88, 80, 84, 52, -126, 32, -98, 53, -11, 3, 10, -69, 24, 74, -45, -44, 80, -102, -98, 115, -56, -55, 63, -39, 63, 113, -26, -51, -90, 27, 35, -120, -112, -110, 116, -25, -67, -103, 55, 111, 102, 119, -107, -38, 81, 91, 119, 23, -105, -125, -121, -114, 82, 106, 115, 35, 127, 14, -93, -63, 83, 20, -98, -122, -42, -116, -84, 73, 2, -85, 39, -12, -78, 58, -19, 63, 30, 30, 30, -99, 88, 51, -74, -70, -94, -45, -110, 79, -7, 121, -75, 38, -74, 38, -75, 122, 73, -89, 43, 28, -115, -23, 43, -73, 122, 42, -56, -126, 94, -42, -52, 24, -29, -111, -100, 114, 37, 105, 98, -90, -23, -22, 44, 0, -125, -62, -45, 46, -59, 99, -6, -67, 11, 77, -78, 85, 12, -42, -91, 23, 84, 23, 33, -116, -50, 15, -6, 55, -3, -101, 70, -56, 44, -22, -86, -81, -112, 0, 89, 76, 96, 52, 21, 29, 5, -114, 106, 62, -96, -110, -29, 41, 42, 76, -42, 127, 42, 84, 96, 90, -6, 71, 39, 12, 73, 80, -112, 35, 35, -47, -22, 85, -118, 27, -66, -51, 64, -88, 107, -15, 49, -76, 48, 91, 20, -110, -126, -84, -41, -21, 73, 59, -110, 26, 60, 60, -103, 19, 113, 16, -66, 108, -20, 53, 38, -75, 88, -5, -48, -3, -31, 79, 38, -83, -72, -47, -23, -68, -47, 16, -108, -70, 116, -127, 107, -118, -104, -34, -86, -118, 84, -100, 65, -122, 120, 9, -9, -69, -50, -39, -26, 112, 56, 83, -123, 118, 114, -128, -86, 86, 111, -46, 60, -19, 73, -61, -61, 84, -26, -123, 82, 84, -89, 5, 50, 111, 0, 37, -8, 40, -101, 2, 51, 1, 103, -88, 88, -72, 65, -103, 17, -5, 17, 122, 63, -12, -100, 59, 104, -116, -88, 88, 15, 51, 105, 13, -125, -96, -104, -8, 59, 60, 43, 64, -115, 91, -85, 58, -85, -29, -100, 84, -52, 123, -85, 87, -110, 38, 2, -47, -56, 82, -81, -126, 80, 87, 62, 19, -125, 39, -66, 9, -105, 115, 12, -34, 18, -21, 85, 34, 56, -106, -117, 81, -54, -92, 37, -72, -84, -73, -63, -77, -31, 73, 61, -50, -6, -102, -51, 101, 1, -102, 83, -104, -69, 28, -48, 65, 30, 117, -44, -10, -59, 99, 116, 117, 123, -81, -10, -95, -86, -8, 113, 51, -80, 20, 29, -75, 21, 93, 71, -61, -127, 58, -1, -6, 60, -2, -6, 28, -2, -5, 34, -1, 94, 119, -36, 44, 74, -87, -66, 1, 39, -65, -123, -81, 101, 4, 0, 0] as byte[] as byte[], "0": [9, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108, 0, 3] as byte[] as byte[], p: [8, 3, 119, 101, 98] as byte[] as byte[], "1": [8, 23, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 100, 101, 109, 111, 110, 95, 104, 101, 97, 114, 116] as byte[] as byte[], "2": [8, 3, 119, 101, 98] as byte[] as byte[], t: [9, 29, 98, 108, 111, 111, 100, 109, 97, 103, 105, 99, 58, 105, 116, 101, 109, 95, 100, 101, 109, 111, 110, 95, 99, 114, 121, 115, 116, 97, 108, 0, 3] as byte[] as byte[], "6": [8, 3, 119, 101, 98] as byte[] as byte[], "7": [8, 26, 98, 101, 119, 105, 116, 99, 104, 109, 101, 110, 116, 58, 104, 101, 108, 108, 104, 111, 117, 110, 100, 95, 104, 111, 114, 110] as byte[] as byte[], "8": [8, 3, 119, 101, 98] as byte[] as byte[], "9": [8, 3, 119, 101, 98] as byte[] as byte[], z: [8, 3, 119, 101, 98] as byte[] as byte[]}}) as IItemStack;
recipes.addHiddenShapeless("boct", bag_of_corrupted_truth, [<contenttweaker:bag_of_truth_locked>, <contenttweaker:corrupted_key_to_infinity>]);

# Call of the Underworld
mods.jei.JEI.hide(<contenttweaker:call_of_the_underworld>);
<contenttweaker:call_of_the_underworld>.addTooltip(format.darkRed("Dropped by Immortus."));

# Heaven's Cleansing
recipes.addHiddenShapeless("hc", <contenttweaker:heavens_cleansing>, [<contenttweaker:call_of_the_underworld>,<contenttweaker:essence_of_the_contrary>]);
mods.jei.JEI.hide(<contenttweaker:heavens_cleansing>);

# Heavenly Key to Infinity
recipes.addHiddenShapeless("hkti", <contenttweaker:heavenly_key_to_infinity>, [<contenttweaker:corrupted_key_to_infinity>,<contenttweaker:heavens_cleansing>]);
mods.jei.JEI.hide(<contenttweaker:heavenly_key_to_infinity>);

# SI
recipes.addHiddenShapeless("si", <contenttweaker:si>, [<minecraft:egg>,<contenttweaker:corrupted_key_to_infinity>]);
mods.jei.JEI.hide(<contenttweaker:si>);

# Encoded Bag of Truth (Real)
val bag_of_truth_real = <extrautils2:bagofholding>.withTag({display: {Lore: ["§c§lUNLOCKED"], Name: "§b§lBag of Truth"}, Items: {m: [10, 12, 119, 114, 105, 116, 116, 101, 110, 95, 98, 111, 111, 107, 3, -121, 31, -117, 8, 0, 0, 0, 0, 0, 0, 0, 101, 84, 61, -113, -36, 54, 20, -108, 11, 7, -105, 20, 41, -36, -91, 123, -69, 93, -128, -51, -62, 112, -118, 0, 110, 14, 119, 112, 2, -97, -31, -8, -128, 56, -122, 113, -56, 54, 92, -23, -83, 68, 47, 69, 42, 36, -75, -118, 98, -72, 13, -110, 31, -112, -33, 112, -65, -63, -83, 127, 89, -26, -111, 39, -19, -6, -46, 73, -4, -104, 55, 51, 111, -8, -66, 42, -118, 47, -117, -121, -99, -86, 57, -100, 21, 69, -15, 117, -15, -37, -5, 101, -28, 63, -30, -14, -23, -14, -70, 89, 81, -39, 104, 83, 45, 54, 118, 99, -33, 54, 42, 82, -93, 14, 76, -93, -21, -87, 118, -106, 41, 54, -34, -11, 117, 115, -98, -10, -81, 40, 112, -34, 75, -121, 66, -65, -37, -79, -25, -118, -40, -54, -103, -11, 122, -67, 88, 126, 40, -2, -102, -63, -97, -85, -125, -74, -75, -100, -9, -44, 114, -21, -68, -26, 64, 21, 27, -114, -72, -93, 108, 69, 33, 42, 31, -27, -120, 34, -53, 3, 25, -67, 99, -46, 22, 53, -103, 6, 112, 98, 111, 57, 4, -127, -107, -30, -105, 125, 76, -91, 85, -91, 58, 0, -84, 101, -19, 102, -94, -94, -128, -27, 29, -112, 66, -89, -67, -114, 107, -16, -8, 103, -26, 113, 35, 4, -94, -10, -88, 28, 2, 36, 40, 95, 54, -92, 3, -19, -76, 85, -58, -116, -28, 14, -20, 23, 116, -55, -91, -22, -125, 40, -122, 38, -39, 86, 32, -83, 44, -24, -91, 82, -65, -2, 111, -103, -94, -53, -38, -124, -9, 74, -2, 24, 64, 35, 92, -37, -12, -113, 31, 63, -7, 33, -92, 13, -79, -28, -9, -103, 10, 80, -88, 114, 101, 116, -98, 6, 21, 104, -81, 109, -11, 93, 3, 66, 16, -76, 34, -111, -115, 69, -49, -119, 85, 105, 92, -32, 84, -6, 39, -100, 74, -11, 112, 96, -86, -19, 118, -57, -38, -62, 42, -3, 84, 28, 96, -25, 40, -22, 63, -50, 37, -97, 37, -106, 64, -74, 81, 56, 26, 13, -69, 118, -88, 47, 104, 91, -114, -111, 125, -53, -40, 2, 96, -45, -73, 0, -113, -29, -71, 20, -67, 119, 109, -53, -91, 107, 113, 81, -75, -82, -121, -121, 71, -83, -96, 91, -70, -38, -22, 63, -7, -114, -124, 85, 45, -97, 34, 4, -35, 118, -112, 51, 1, -79, 125, -25, -58, 19, -18, 88, 18, 38, -69, -34, -96, 59, -15, 28, -44, 95, -99, 54, 46, 91, -23, 83, 91, 72, -54, 13, -115, -125, -50, 82, 67, 107, 50, -25, -38, 2, -4, -26, -6, 13, -107, -50, 34, 2, 38, 67, -69, -63, -126, 107, 100, -79, -30, -33, 83, 60, 42, -107, -123, 24, -60, 111, -116, -115, -12, -106, 46, -116, 17, -15, -126, -81, -74, -120, -62, 98, 10, -42, 32, 13, -121, 83, -79, -73, 64, -70, 11, 121, -10, -126, -74, -50, 91, -119, -86, 66, -39, 30, 117, -57, -108, -25, -68, 0, 55, 123, 44, 12, 41, 48, -55, -90, 84, 73, -70, -44, -71, 16, -12, -42, 36, 90, 127, 31, -33, -119, 27, 16, 10, -70, -94, -67, -59, 87, -60, 35, 76, -2, 109, 44, -94, -97, 63, -34, -78, 49, 43, 81, -106, -19, 64, 7, -47, -115, 46, 63, 36, -128, 7, 106, 93, -43, -87, 114, -65, -110, -50, -120, -23, 21, 35, -36, 58, 50, -68, 73, -17, 99, -118, 78, 16, -2, -75, -125, -35, 94, 114, -114, 2, 96, -14, -53, 73, 60, 117, -8, 60, 82, 101, -93, 108, -103, -70, -44, 121, -105, 7, -125, 15, 108, 118, -55, -91, 31, 83, 47, 117, -68, -41, 68, -119, -4, -19, 103, -111, 15, 106, -52, 1, -58, 124, -39, 44, 117, -100, 30, 8, 12, -57, -85, -106, -85, -17, -128, 107, 121, 92, -111, 117, 121, 33, 103, 89, 69, -19, -20, 102, 73, 73, -94, -92, -64, -9, 34, 6, 61, 20, -107, -30, -21, -2, -50, 36, -23, 88, -14, 111, -112, 34, -9, 16, -26, -25, -126, -34, 96, 14, 76, 18, 37, 109, -121, 99, 58, 88, 53, -55, -28, -124, -109, 64, 47, -48, -44, 100, 39, 72, 36, -54, 113, -50, 113, -51, 49, -113, -118, 116, -16, 21, 88, -113, 28, -45, -9, -21, 41, -28, 39, -70, -64, 74, -101, 60, 58, 17, 64, 49, -3, -5, -71, -18, -117, 62, 68, 82, -55, -17, 124, 113, 106, -22, 51, -115, -7, -55, -12, 34, 67, -120, -85, 79, -26, 75, 87, -44, -72, 110, -102, -59, 21, -100, -73, -44, -103, -55, 101, 38, 9, -61, -126, -98, 126, -117, 59, 55, -13, -99, 75, 24, -126, -25, 90, 43, 95, -123, 85, -110, 23, -67, 46, 93, -112, 79, -119, 47, -58, 78, 126, 102, -94, 43, -28, 110, 53, 108, 58, -16, 105, -43, -98, 51, -87, -109, 8, -97, 21, 95, -88, 62, 54, -50, 23, -113, 46, 108, -51, 6, 19, -43, -69, -106, -98, 51, 18, 103, -49, -118, -121, 81, 71, -61, -59, 55, -97, 110, -73, -97, 110, -115, -60, -32, -25, -29, -16, 122, -119, 14, 60, 40, -50, 60, 7, 103, 14, 92, 61, 40, -2, 3, -124, 21, -37, -26, -91, 6, 0, 0] as byte[] as byte[]}}) as IItemStack;
recipes.addHiddenShapeless("botr", bag_of_truth_real, [<contenttweaker:bag_of_truth_locked>,<contenttweaker:heavenly_key_to_infinity>]);

print("ENDING ContentTweakerBag.zs");